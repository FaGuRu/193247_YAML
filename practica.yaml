#Namespace
apiVersion: v1
kind: Namespace
metadata: 
    name: practice-namespace

---
#------------------------------------------------------------------Postgres--------------------------------------------------------------------

# volumen persistente de Postgres
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-postgres-volume
spec: # Configuración de lo que va a construir a nivel de disco
  storageClassName: postgres
  capacity:
    storage: 10Gi # Capacidad 
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/postgres-volume" # Lugar donde se almacenaran los datos

---
# Almacenamiento de clase de Postgres
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: postgres
provisioner: kubernetes.io/no-provisioner # no-provisioner -> Entorno de infraestructura local
reclaimPolicy: Retain # Que realizara con mis datos ?
volumeBindingMode: WaitForFirstConsumer

---
# Reclamo de Volumen persistente de Postgres
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pcv-postgres
spec:
  storageClassName: postgres
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests: 
      storage: 5Gi

---
#Configmap Postgres
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-configmap
  namespace: practice-namespace
  labels:
    app: postgres-service  
data:
  POSTGRES_PASSWORD: "Fabricio"
  POSTGRES_USER: "admin"
  POSTGRES_DB: "practicedb"

---
# Deploy Postgres
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresdb-deployment
  namespace: practice-namespace
  labels:
    app: postgres-service
spec:
  selector:
    matchLabels:
      app: postgres-service
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-service
    spec:
      containers:
      - image: postgres:11  #docker pull image
        name: postgres-practice
        ports:
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db-volume 
        envFrom:
         - configMapRef:
              name: postgres-configmap
      volumes:
      - name: postgres-db-volume
        persistentVolumeClaim:
           claimName: pcv-postgres
---
#Service Postgres
apiVersion: v1
kind: Service
metadata:
  name: services-postgres
spec:
  selector:
    app:  postgres-service
  ports:
    - port: 5300
      targetPort: 5432
  type: LoadBalancer

---
#------------------------------------------------------------------MYSQL------------------------------------------------------------------------

# volumen persistente de MySql
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mysql-volume
spec: # Configuración de lo que va a construir a nivel de disco
  storageClassName: mysql
  capacity:
    storage: 10Gi # Capacidad 
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/mysql-volume" # Lugar donde se almacenaran los datos

---
# Almacenamiento de clase de MySQL
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mysql
provisioner: kubernetes.io/no-provisioner # no-provisioner -> Entorno de infraestructura local
reclaimPolicy: Retain # Que realizara con mis datos ?
volumeBindingMode: WaitForFirstConsumer

---
# Reclamo de Volumen persistente de MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pcv-mysql
spec:
  storageClassName: mysql
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests: 
      storage: 5Gi

---
#Configmap MySQL
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-configmap
  namespace: practice-namespace
  labels:
    app: mysql-service  
data:
  MYSQL_ROOT_PASSWORD: "Fabricio"
  MYSQL_DATABASE: "mysqldb"

---
# Deploy MySQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: practice-namespace
  labels:
    app: mysql-service
spec:
  selector:
    matchLabels:
      app: mysql-service
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-service
    spec:
      containers:
      - image: mysql:8  #docker pull image
        name: mysql-practice
        ports:
        - containerPort: 3306
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-db-volume 
        envFrom:
         - configMapRef:
              name: mysql-configmap
      volumes:
      - name: mysql-db-volume
        persistentVolumeClaim:
           claimName: pcv-mysql
---
#Service MySQL
apiVersion: v1
kind: Service
metadata:
  name: services-mysql
spec:
  selector:
    app:  mysql-service
  ports:
    - port: 5303
      targetPort: 3306
  type: LoadBalancer

---
#------------------------------------------------------------------------Mongo-------------------------------------------------------------------

# volumen persistente de Mongo
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mongo-volume
spec: # Configuración de lo que va a construir a nivel de disco
  storageClassName: mongo
  capacity:
    storage: 10Gi # Capacidad 
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/mongo-volume" # Lugar donde se almacenaran los datos

---
# Almacenamiento de clase de Mongo
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mongo
provisioner: kubernetes.io/no-provisioner # no-provisioner -> Entorno de infraestructura local
reclaimPolicy: Retain # Que realizara con mis datos ?
volumeBindingMode: WaitForFirstConsumer

---
# Reclamo de Volumen persistente de Mongo
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pcv-mongo
spec:
  storageClassName: mongo
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests: 
      storage: 5Gi

---
#Configmap Mongo
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-configmap
  namespace: practice-namespace
  labels:
    app: mongo-service  
data:
  MONGO_INITDB_ROOT_PASSWORD: "prueba"
  MONGO_INITDB_ROOT_USERNAME: "Fabricio"
  MONGO_INITDB_DATABASE: "admindb"

---
# Deploy Mongo
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: practice-namespace
  labels:
    app: mongo-service
spec:
  selector:
    matchLabels:
      app: mongo-service
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo-service
    spec:
      containers:
      - image: mongo:4.1.7
        name: mongo-practice
        ports:
        - containerPort: 27017
          protocol: TCP
        volumeMounts:
        - mountPath: /data/db
          name: mongo-db-volume1
        envFrom:
         - configMapRef:
              name: mongo-configmap
      volumes:
      - name: mongo-db-volume1
        persistentVolumeClaim:
           claimName: pcv-mongo
---
#Service Mongo
apiVersion: v1
kind: Service
metadata:
  name: services-mongo
spec:
  selector:
    app:  mongo-service
  ports:
    - port: 5302
      targetPort: 27017
  type: LoadBalancer

---

#--------------------------------------------------------------Redis---------------------------------------------------------------------------

# volumen persistente de Redis
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-redis-volume
spec: # Configuración de lo que va a construir a nivel de disco
  storageClassName: redis
  capacity:
    storage: 10Gi # Capacidad 
  accessModes:
    - ReadWriteOnce # Lectura y escritura
  hostPath:
    path: "/mnt/redis-volume" # Lugar donde se almacenaran los datos

---
# Almacenamiento de clase de Redis
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: redis
provisioner: kubernetes.io/no-provisioner # no-provisioner -> Entorno de infraestructura local
reclaimPolicy: Retain # Que realizara con mis datos ?
volumeBindingMode: WaitForFirstConsumer

---
# Reclamo de Volumen persistente de Redis
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pcv-redis
spec:
  storageClassName: redis
  accessModes:
    - ReadWriteOnce
  resources: #Configuración de lo que va a reclamar
    requests: 
      storage: 5Gi

---
#Configmap Redis
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-configmap
  namespace: practice-namespace
  labels:
    app: redis-service  
data:
  REDIS_MASTER_PASSWORD: "Fabricio"
  REDIS_DB: "practicadb"

---
# Deploy Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: practice-namespace
  labels:
    app: redis-service
spec:
  selector:
    matchLabels:
      app: redis-service
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-service
    spec:
      containers:
      - image: redis:latest
        name: redis-practice
        ports:
        - containerPort: 6379
          protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: redis-db-volume 
        envFrom:
         - configMapRef:
              name: redis-configmap
      volumes:
      - name: redis-db-volume
        persistentVolumeClaim:
           claimName: pcv-redis
---
#Service Redis
apiVersion: v1
kind: Service
metadata:
  name: services-redis
spec:
  selector:
    app:  redis-service
  ports:
    - port: 5301
      targetPort: 6379
  type: LoadBalancer